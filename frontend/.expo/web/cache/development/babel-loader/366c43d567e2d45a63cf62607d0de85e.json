{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nexport function useOnMount(asyncGetter, initialResult) {\n  var _useState = useState({\n    loading: true,\n    result: initialResult\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  useEffect(function () {\n    var getAsync = function getAsync() {\n      var result;\n      return _regeneratorRuntime.async(function getAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(asyncGetter());\n\n            case 2:\n              result = _context.sent;\n              setResponse({\n                loading: false,\n                result: result\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}\nexport var deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useOnEvent(eventName, initialValueAsyncGetter, defaultValue) {\n  var _useOnMount = useOnMount(initialValueAsyncGetter, defaultValue),\n      loading = _useOnMount.loading,\n      initialResult = _useOnMount.result;\n\n  var _useState3 = useState(defaultValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      result = _useState4[0],\n      setResult = _useState4[1];\n\n  useEffect(function () {\n    setResult(initialResult);\n  }, [initialResult]);\n  useEffect(function () {\n    var subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return {\n    loading: loading,\n    result: result\n  };\n}","map":{"version":3,"sources":["asyncHookWrappers.ts"],"names":["useState","loading","result","initialResult","useEffect","getAsync","asyncGetter","setResponse","deviceInfoEmitter","NativeModules","useOnMount","setResult","subscription"],"mappings":";;AAAA,SAAA,QAAA,EAAA,SAAA,QAAA,OAAA;;;AASA,OAAO,SAAA,UAAA,CAAA,WAAA,EAAA,aAAA,EAA4F;AAAA,kBACjEA,QAAQ,CAAqB;AAC3DC,IAAAA,OAAO,EADoD,IAAA;AAE3DC,IAAAA,MAAM,EAAEC;AAFmD,GAArB,CADyD;AAAA;AAAA,MAC3F,QAD2F;AAAA,MAC3F,WAD2F;;AAMjGC,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACMC,WAArB,EADe;;AAAA;AACTJ,cAAAA,MADS;AAEfK,cAAAA,WAAW,CAAC;AAAEN,gBAAAA,OAAO,EAAT,KAAA;AAAkBC,gBAAAA,MAAAA,EAAAA;AAAlB,eAAD,CAAXK;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAKAF,IAAAA,QAAQ;AAPD,GAAA,EAQN,CARHD,WAQG,CARM,CAATA;AAUA,SAAA,QAAA;AACD;AAED,OAAO,IAAMI,iBAAiB,GAAG,IAAA,kBAAA,CAAuBC,aAAa,CAA9D,YAA0B,CAA1B;AAQP,OAAO,SAAA,UAAA,CAAA,SAAA,EAAA,uBAAA,EAAA,YAAA,EAIe;AAAA,oBACuBC,UAAU,CAAA,uBAAA,EAArD,YAAqD,CADjC;AAAA,MACd,OADc,eACd,OADc;AAAA,MACKP,aADL,eACHD,MADG;;AAAA,mBAEQF,QAAQ,CAFhB,YAEgB,CAFhB;AAAA;AAAA,MAEd,MAFc;AAAA,MAEd,SAFc;;AAKpBI,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS,CAATA,aAAS,CAATA;AADO,GAAA,EAEN,CAPiB,aAOjB,CAFM,CAATP;AAMAA,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,YAAY,GAAGJ,iBAAiB,CAAjBA,WAAAA,CAAAA,SAAAA,EAArB,SAAqBA,CAArB;AACA,WAAO;AAAA,aAAMI,YAAY,CAAzB,MAAaA,EAAN;AAAA,KAAP;AAFO,GAAA,EAXW,EAWX,CAATR;AAMA,SAAO;AAAEH,IAAAA,OAAF,EAAEA,OAAF;AAAWC,IAAAA,MAAAA,EAAAA;AAAX,GAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n\nexport const deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\n/**\n * simple hook wrapper for handling events\n * @param eventName\n * @param initialValueAsyncGetter\n * @param defaultValue\n */\nexport function useOnEvent<T>(\n  eventName: string,\n  initialValueAsyncGetter: () => Promise<T>,\n  defaultValue: T\n): AsyncHookResult<T> {\n  const { loading, result: initialResult } = useOnMount(initialValueAsyncGetter, defaultValue);\n  const [result, setResult] = useState<T>(defaultValue);\n\n  // sets the result to what the intial value is on mount\n  useEffect(() => {\n    setResult(initialResult);\n  }, [initialResult]);\n\n  // - set up the event listener to set the result\n  // - set up the clean up function to remove subscription on unmount\n  useEffect(() => {\n    const subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return () => subscription.remove();\n  }, []);\n\n  // loading will only be true while getting the inital value. After that, it will always be false, but a new result may occur\n  return { loading, result };\n}\n"]},"metadata":{},"sourceType":"module"}