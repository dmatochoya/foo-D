{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback, useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useOnEvent, useOnMount } from \"./internal/asyncHookWrappers\";\nimport devicesWithNotch from \"./internal/devicesWithNotch\";\nimport RNDeviceInfo from \"./internal/nativeInterface\";\nimport { getSupportedPlatformInfoFunctions, getSupportedPlatformInfoSync } from \"./internal/supported-platform-info\";\nimport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState } from \"./internal/types\";\nexport var getUniqueId = function getUniqueId() {\n  return getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'uniqueId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: function getter() {\n      return RNDeviceInfo.uniqueId;\n    }\n  });\n};\nvar uniqueId;\nexport function syncUniqueId() {\n  return _regeneratorRuntime.async(function syncUniqueId$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'ios')) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(RNDeviceInfo.syncUniqueId());\n\n        case 3:\n          uniqueId = _context.sent;\n          _context.next = 7;\n          break;\n\n        case 6:\n          uniqueId = getUniqueId();\n\n        case 7:\n          return _context.abrupt(\"return\", uniqueId);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _getSupportedPlatform = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getInstanceId();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getInstanceIdSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform2 = _slicedToArray(_getSupportedPlatform, 2),\n    getInstanceId = _getSupportedPlatform2[0],\n    getInstanceIdSync = _getSupportedPlatform2[1];\n\nexport { getInstanceId, getInstanceIdSync };\n\nvar _getSupportedPlatform3 = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getSerialNumber();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getSerialNumberSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform4 = _slicedToArray(_getSupportedPlatform3, 2),\n    getSerialNumber = _getSupportedPlatform4[0],\n    getSerialNumberSync = _getSupportedPlatform4[1];\n\nexport { getSerialNumber, getSerialNumberSync };\n\nvar _getSupportedPlatform5 = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getAndroidId();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getAndroidIdSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform6 = _slicedToArray(_getSupportedPlatform5, 2),\n    getAndroidId = _getSupportedPlatform6[0],\n    getAndroidIdSync = _getSupportedPlatform6[1];\n\nexport { getAndroidId, getAndroidIdSync };\n\nvar _getSupportedPlatform7 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getIpAddress();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getIpAddressSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform8 = _slicedToArray(_getSupportedPlatform7, 2),\n    getIpAddress = _getSupportedPlatform8[0],\n    getIpAddressSync = _getSupportedPlatform8[1];\n\nexport { getIpAddress, getIpAddressSync };\n\nvar _getSupportedPlatform9 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.isCameraPresent();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isCameraPresentSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform10 = _slicedToArray(_getSupportedPlatform9, 2),\n    isCameraPresent = _getSupportedPlatform10[0],\n    isCameraPresentSync = _getSupportedPlatform10[1];\n\nexport { isCameraPresent, isCameraPresentSync };\nexport function getMacAddress() {\n  return _regeneratorRuntime.async(function getMacAddress$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", RNDeviceInfo.getMacAddress());\n\n        case 4:\n          if (!(Platform.OS === 'ios')) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", '02:00:00:00:00:00');\n\n        case 6:\n          return _context2.abrupt(\"return\", 'unknown');\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nexport var getDeviceId = function getDeviceId() {\n  return getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'deviceId',\n    getter: function getter() {\n      return RNDeviceInfo.deviceId;\n    },\n    supportedPlatforms: ['android', 'ios', 'windows']\n  });\n};\n\nvar _getSupportedPlatform11 = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer();\n  },\n  syncGetter: function syncGetter() {\n    return Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform12 = _slicedToArray(_getSupportedPlatform11, 2),\n    getManufacturer = _getSupportedPlatform12[0],\n    getManufacturerSync = _getSupportedPlatform12[1];\n\nexport { getManufacturer, getManufacturerSync };\nexport var getModel = function getModel() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'model',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    getter: function getter() {\n      return RNDeviceInfo.model;\n    }\n  });\n};\nexport var getBrand = function getBrand() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'brand',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return RNDeviceInfo.brand;\n    }\n  });\n};\nvar systemName;\nexport function getSystemName() {\n  if (!systemName) {\n    if (Platform.OS === 'ios') {\n      systemName = RNDeviceInfo.systemName;\n    } else if (Platform.OS === 'android') {\n      systemName = 'Android';\n    } else if (Platform.OS === 'windows') {\n      systemName = 'Windows';\n    } else {\n      systemName = 'unknown';\n    }\n  }\n\n  return systemName;\n}\nexport var getSystemVersion = function getSystemVersion() {\n  return getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return RNDeviceInfo.systemVersion;\n    },\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'systemVersion'\n  });\n};\n\nvar _getSupportedPlatform13 = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getBuildId();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getBuildIdSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform14 = _slicedToArray(_getSupportedPlatform13, 2),\n    getBuildId = _getSupportedPlatform14[0],\n    getBuildIdSync = _getSupportedPlatform14[1];\n\nexport { getBuildId, getBuildIdSync };\n\nvar _getSupportedPlatform15 = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getApiLevel();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getApiLevelSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform16 = _slicedToArray(_getSupportedPlatform15, 2),\n    getApiLevel = _getSupportedPlatform16[0],\n    getApiLevelSync = _getSupportedPlatform16[1];\n\nexport { getApiLevel, getApiLevelSync };\nexport var getBundleId = function getBundleId() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'bundleId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return RNDeviceInfo.bundleId;\n    }\n  });\n};\n\nvar _getSupportedPlatform17 = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getInstallerPackageName();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getInstallerPackageNameSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform18 = _slicedToArray(_getSupportedPlatform17, 2),\n    getInstallerPackageName = _getSupportedPlatform18[0],\n    getInstallerPackageNameSync = _getSupportedPlatform18[1];\n\nexport { getInstallerPackageName, getInstallerPackageNameSync };\nexport var getApplicationName = function getApplicationName() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'appName',\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return RNDeviceInfo.appName;\n    },\n    supportedPlatforms: ['android', 'ios', 'windows']\n  });\n};\nexport var getBuildNumber = function getBuildNumber() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'buildNumber',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: function getter() {\n      return RNDeviceInfo.buildNumber;\n    },\n    defaultValue: 'unknown'\n  });\n};\nexport var getVersion = function getVersion() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'version',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: function getter() {\n      return RNDeviceInfo.appVersion;\n    }\n  });\n};\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nvar _getSupportedPlatform19 = getSupportedPlatformInfoFunctions({\n  memoKey: 'deviceName',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getDeviceName();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getDeviceNameSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform20 = _slicedToArray(_getSupportedPlatform19, 2),\n    getDeviceName = _getSupportedPlatform20[0],\n    getDeviceNameSync = _getSupportedPlatform20[1];\n\nexport { getDeviceName, getDeviceNameSync };\n\nvar _getSupportedPlatform21 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getUsedMemory();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getUsedMemorySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform22 = _slicedToArray(_getSupportedPlatform21, 2),\n    getUsedMemory = _getSupportedPlatform22[0],\n    getUsedMemorySync = _getSupportedPlatform22[1];\n\nexport { getUsedMemory, getUsedMemorySync };\nvar userAgent;\nexport function getUserAgent() {\n  return _regeneratorRuntime.async(function getUserAgent$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (userAgent) {\n            _context3.next = 8;\n            break;\n          }\n\n          if (!(Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web')) {\n            _context3.next = 7;\n            break;\n          }\n\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(RNDeviceInfo.getUserAgent());\n\n        case 4:\n          userAgent = _context3.sent;\n          _context3.next = 8;\n          break;\n\n        case 7:\n          userAgent = 'unknown';\n\n        case 8:\n          return _context3.abrupt(\"return\", userAgent);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUserAgentSync() {\n  if (!userAgent) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      userAgent = RNDeviceInfo.getUserAgentSync();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n\n  return userAgent;\n}\n\nvar _getSupportedPlatform23 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getFontScale();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getFontScaleSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform24 = _slicedToArray(_getSupportedPlatform23, 2),\n    getFontScale = _getSupportedPlatform24[0],\n    getFontScaleSync = _getSupportedPlatform24[1];\n\nexport { getFontScale, getFontScaleSync };\n\nvar _getSupportedPlatform25 = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getBootloader();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getBootloaderSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform26 = _slicedToArray(_getSupportedPlatform25, 2),\n    getBootloader = _getSupportedPlatform26[0],\n    getBootloaderSync = _getSupportedPlatform26[1];\n\nexport { getBootloader, getBootloaderSync };\n\nvar _getSupportedPlatform27 = getSupportedPlatformInfoFunctions({\n  getter: function getter() {\n    return RNDeviceInfo.getDevice();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getDeviceSync();\n  },\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android']\n}),\n    _getSupportedPlatform28 = _slicedToArray(_getSupportedPlatform27, 2),\n    getDevice = _getSupportedPlatform28[0],\n    getDeviceSync = _getSupportedPlatform28[1];\n\nexport { getDevice, getDeviceSync };\n\nvar _getSupportedPlatform29 = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getDisplay();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getDisplaySync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform30 = _slicedToArray(_getSupportedPlatform29, 2),\n    getDisplay = _getSupportedPlatform30[0],\n    getDisplaySync = _getSupportedPlatform30[1];\n\nexport { getDisplay, getDisplaySync };\n\nvar _getSupportedPlatform31 = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getFingerprint();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getFingerprintSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform32 = _slicedToArray(_getSupportedPlatform31, 2),\n    getFingerprint = _getSupportedPlatform32[0],\n    getFingerprintSync = _getSupportedPlatform32[1];\n\nexport { getFingerprint, getFingerprintSync };\n\nvar _getSupportedPlatform33 = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getHardware();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getHardwareSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform34 = _slicedToArray(_getSupportedPlatform33, 2),\n    getHardware = _getSupportedPlatform34[0],\n    getHardwareSync = _getSupportedPlatform34[1];\n\nexport { getHardware, getHardwareSync };\n\nvar _getSupportedPlatform35 = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getHost();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getHostSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform36 = _slicedToArray(_getSupportedPlatform35, 2),\n    getHost = _getSupportedPlatform36[0],\n    getHostSync = _getSupportedPlatform36[1];\n\nexport { getHost, getHostSync };\n\nvar _getSupportedPlatform37 = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getProduct();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getProductSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform38 = _slicedToArray(_getSupportedPlatform37, 2),\n    getProduct = _getSupportedPlatform38[0],\n    getProductSync = _getSupportedPlatform38[1];\n\nexport { getProduct, getProductSync };\n\nvar _getSupportedPlatform39 = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getTags();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getTagsSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform40 = _slicedToArray(_getSupportedPlatform39, 2),\n    getTags = _getSupportedPlatform40[0],\n    getTagsSync = _getSupportedPlatform40[1];\n\nexport { getTags, getTagsSync };\n\nvar _getSupportedPlatform41 = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getType();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getTypeSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform42 = _slicedToArray(_getSupportedPlatform41, 2),\n    getType = _getSupportedPlatform42[0],\n    getTypeSync = _getSupportedPlatform42[1];\n\nexport { getType, getTypeSync };\n\nvar _getSupportedPlatform43 = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getBaseOs();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getBaseOsSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform44 = _slicedToArray(_getSupportedPlatform43, 2),\n    getBaseOs = _getSupportedPlatform44[0],\n    getBaseOsSync = _getSupportedPlatform44[1];\n\nexport { getBaseOs, getBaseOsSync };\n\nvar _getSupportedPlatform45 = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getPreviewSdkInt();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getPreviewSdkIntSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform46 = _slicedToArray(_getSupportedPlatform45, 2),\n    getPreviewSdkInt = _getSupportedPlatform46[0],\n    getPreviewSdkIntSync = _getSupportedPlatform46[1];\n\nexport { getPreviewSdkInt, getPreviewSdkIntSync };\n\nvar _getSupportedPlatform47 = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getSecurityPatch();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getSecurityPatchSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform48 = _slicedToArray(_getSupportedPlatform47, 2),\n    getSecurityPatch = _getSupportedPlatform48[0],\n    getSecurityPatchSync = _getSupportedPlatform48[1];\n\nexport { getSecurityPatch, getSecurityPatchSync };\n\nvar _getSupportedPlatform49 = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getCodename();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getCodenameSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform50 = _slicedToArray(_getSupportedPlatform49, 2),\n    getCodename = _getSupportedPlatform50[0],\n    getCodenameSync = _getSupportedPlatform50[1];\n\nexport { getCodename, getCodenameSync };\n\nvar _getSupportedPlatform51 = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getIncremental();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getIncrementalSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform52 = _slicedToArray(_getSupportedPlatform51, 2),\n    getIncremental = _getSupportedPlatform52[0],\n    getIncrementalSync = _getSupportedPlatform52[1];\n\nexport { getIncremental, getIncrementalSync };\n\nvar _getSupportedPlatform53 = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.isEmulator();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isEmulatorSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform54 = _slicedToArray(_getSupportedPlatform53, 2),\n    isEmulator = _getSupportedPlatform54[0],\n    isEmulatorSync = _getSupportedPlatform54[1];\n\nexport { isEmulator, isEmulatorSync };\nexport var isTablet = function isTablet() {\n  return getSupportedPlatformInfoSync({\n    defaultValue: false,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'tablet',\n    getter: function getter() {\n      return RNDeviceInfo.isTablet;\n    }\n  });\n};\n\nvar _getSupportedPlatform55 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.isPinOrFingerprintSet();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isPinOrFingerprintSetSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform56 = _slicedToArray(_getSupportedPlatform55, 2),\n    isPinOrFingerprintSet = _getSupportedPlatform56[0],\n    isPinOrFingerprintSetSync = _getSupportedPlatform56[1];\n\nexport { isPinOrFingerprintSet, isPinOrFingerprintSetSync };\nvar notch;\nexport function hasNotch() {\n  if (notch === undefined) {\n    var _brand = getBrand();\n\n    var _model = getModel();\n\n    notch = devicesWithNotch.findIndex(function (item) {\n      return item.brand.toLowerCase() === _brand.toLowerCase() && item.model.toLowerCase() === _model.toLowerCase();\n    }) !== -1;\n  }\n\n  return notch;\n}\n\nvar _getSupportedPlatform57 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.hasGms();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.hasGmsSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform58 = _slicedToArray(_getSupportedPlatform57, 2),\n    hasGms = _getSupportedPlatform58[0],\n    hasGmsSync = _getSupportedPlatform58[1];\n\nexport { hasGms, hasGmsSync };\n\nvar _getSupportedPlatform59 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.hasHms();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.hasHmsSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform60 = _slicedToArray(_getSupportedPlatform59, 2),\n    hasHms = _getSupportedPlatform60[0],\n    hasHmsSync = _getSupportedPlatform60[1];\n\nexport { hasHms, hasHmsSync };\n\nvar _getSupportedPlatform61 = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: function getter() {\n    return RNDeviceInfo.getFirstInstallTime();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getFirstInstallTimeSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform62 = _slicedToArray(_getSupportedPlatform61, 2),\n    getFirstInstallTime = _getSupportedPlatform62[0],\n    getFirstInstallTimeSync = _getSupportedPlatform62[1];\n\nexport { getFirstInstallTime, getFirstInstallTimeSync };\n\nvar _getSupportedPlatform63 = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getInstallReferrer();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getInstallReferrerSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform64 = _slicedToArray(_getSupportedPlatform63, 2),\n    getInstallReferrer = _getSupportedPlatform64[0],\n    getInstallReferrerSync = _getSupportedPlatform64[1];\n\nexport { getInstallReferrer, getInstallReferrerSync };\n\nvar _getSupportedPlatform65 = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getLastUpdateTime();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getLastUpdateTimeSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform66 = _slicedToArray(_getSupportedPlatform65, 2),\n    getLastUpdateTime = _getSupportedPlatform66[0],\n    getLastUpdateTimeSync = _getSupportedPlatform66[1];\n\nexport { getLastUpdateTime, getLastUpdateTimeSync };\n\nvar _getSupportedPlatform67 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getPhoneNumber();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getPhoneNumberSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform68 = _slicedToArray(_getSupportedPlatform67, 2),\n    getPhoneNumber = _getSupportedPlatform68[0],\n    getPhoneNumberSync = _getSupportedPlatform68[1];\n\nexport { getPhoneNumber, getPhoneNumberSync };\n\nvar _getSupportedPlatform69 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return RNDeviceInfo.getCarrier();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getCarrierSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform70 = _slicedToArray(_getSupportedPlatform69, 2),\n    getCarrier = _getSupportedPlatform70[0],\n    getCarrierSync = _getSupportedPlatform70[1];\n\nexport { getCarrier, getCarrierSync };\n\nvar _getSupportedPlatform71 = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getTotalMemory();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getTotalMemorySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform72 = _slicedToArray(_getSupportedPlatform71, 2),\n    getTotalMemory = _getSupportedPlatform72[0],\n    getTotalMemorySync = _getSupportedPlatform72[1];\n\nexport { getTotalMemory, getTotalMemorySync };\n\nvar _getSupportedPlatform73 = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getMaxMemory();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getMaxMemorySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform74 = _slicedToArray(_getSupportedPlatform73, 2),\n    getMaxMemory = _getSupportedPlatform74[0],\n    getMaxMemorySync = _getSupportedPlatform74[1];\n\nexport { getMaxMemory, getMaxMemorySync };\n\nvar _getSupportedPlatform75 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getTotalDiskCapacity();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getTotalDiskCapacitySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform76 = _slicedToArray(_getSupportedPlatform75, 2),\n    getTotalDiskCapacity = _getSupportedPlatform76[0],\n    getTotalDiskCapacitySync = _getSupportedPlatform76[1];\n\nexport { getTotalDiskCapacity, getTotalDiskCapacitySync };\nexport function getTotalDiskCapacityOld() {\n  return _regeneratorRuntime.async(function getTotalDiskCapacityOld$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context4.next = 2;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", RNDeviceInfo.getTotalDiskCapacityOld());\n\n        case 2:\n          if (!(Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web')) {\n            _context4.next = 4;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", getTotalDiskCapacity());\n\n        case 4:\n          return _context4.abrupt(\"return\", -1);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\n\nvar _getSupportedPlatform77 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getFreeDiskStorage();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getFreeDiskStorageSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform78 = _slicedToArray(_getSupportedPlatform77, 2),\n    getFreeDiskStorage = _getSupportedPlatform78[0],\n    getFreeDiskStorageSync = _getSupportedPlatform78[1];\n\nexport { getFreeDiskStorage, getFreeDiskStorageSync };\nexport function getFreeDiskStorageOld() {\n  return _regeneratorRuntime.async(function getFreeDiskStorageOld$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context5.next = 2;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", RNDeviceInfo.getFreeDiskStorageOld());\n\n        case 2:\n          if (!(Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web')) {\n            _context5.next = 4;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", getFreeDiskStorage());\n\n        case 4:\n          return _context5.abrupt(\"return\", -1);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\n\nvar _getSupportedPlatform79 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getBatteryLevel();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getBatteryLevelSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform80 = _slicedToArray(_getSupportedPlatform79, 2),\n    getBatteryLevel = _getSupportedPlatform80[0],\n    getBatteryLevelSync = _getSupportedPlatform80[1];\n\nexport { getBatteryLevel, getBatteryLevelSync };\n\nvar _getSupportedPlatform81 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.getPowerState();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getPowerStateSync();\n  },\n  defaultValue: {}\n}),\n    _getSupportedPlatform82 = _slicedToArray(_getSupportedPlatform81, 2),\n    getPowerState = _getSupportedPlatform82[0],\n    getPowerStateSync = _getSupportedPlatform82[1];\n\nexport { getPowerState, getPowerStateSync };\n\nvar _getSupportedPlatform83 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.isBatteryCharging();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isBatteryChargingSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform84 = _slicedToArray(_getSupportedPlatform83, 2),\n    isBatteryCharging = _getSupportedPlatform84[0],\n    isBatteryChargingSync = _getSupportedPlatform84[1];\n\nexport { isBatteryCharging, isBatteryChargingSync };\nexport function isLandscape() {\n  return _regeneratorRuntime.async(function isLandscape$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", Promise.resolve(isLandscapeSync()));\n\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isLandscapeSync() {\n  var _Dimensions$get = Dimensions.get('window'),\n      height = _Dimensions$get.height,\n      width = _Dimensions$get.width;\n\n  return width >= height;\n}\n\nvar _getSupportedPlatform85 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.isAirplaneMode();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isAirplaneModeSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform86 = _slicedToArray(_getSupportedPlatform85, 2),\n    isAirplaneMode = _getSupportedPlatform86[0],\n    isAirplaneModeSync = _getSupportedPlatform86[1];\n\nexport { isAirplaneMode, isAirplaneModeSync };\nexport var getDeviceType = function getDeviceType() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return RNDeviceInfo.deviceType;\n    }\n  });\n};\nexport var getDeviceTypeSync = function getDeviceTypeSync() {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return RNDeviceInfo.deviceType;\n    }\n  });\n};\n\nvar _getSupportedPlatform87 = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return RNDeviceInfo.getSupportedAbis();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getSupportedAbisSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform88 = _slicedToArray(_getSupportedPlatform87, 2),\n    supportedAbis = _getSupportedPlatform88[0],\n    supportedAbisSync = _getSupportedPlatform88[1];\n\nexport { supportedAbis, supportedAbisSync };\n\nvar _getSupportedPlatform89 = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getSupported32BitAbis();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getSupported32BitAbisSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform90 = _slicedToArray(_getSupportedPlatform89, 2),\n    supported32BitAbis = _getSupportedPlatform90[0],\n    supported32BitAbisSync = _getSupportedPlatform90[1];\n\nexport { supported32BitAbis, supported32BitAbisSync };\n\nvar _getSupportedPlatform91 = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getSupported64BitAbis();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getSupported64BitAbisSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform92 = _slicedToArray(_getSupportedPlatform91, 2),\n    supported64BitAbis = _getSupportedPlatform92[0],\n    supported64BitAbisSync = _getSupportedPlatform92[1];\n\nexport { supported64BitAbis, supported64BitAbisSync };\nexport function hasSystemFeature(feature) {\n  return _regeneratorRuntime.async(function hasSystemFeature$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context7.next = 2;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", RNDeviceInfo.hasSystemFeature(feature));\n\n        case 2:\n          return _context7.abrupt(\"return\", false);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function hasSystemFeatureSync(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n\n  return false;\n}\n\nvar _getSupportedPlatform93 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return RNDeviceInfo.getSystemAvailableFeatures();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getSystemAvailableFeaturesSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform94 = _slicedToArray(_getSupportedPlatform93, 2),\n    getSystemAvailableFeatures = _getSupportedPlatform94[0],\n    getSystemAvailableFeaturesSync = _getSupportedPlatform94[1];\n\nexport { getSystemAvailableFeatures, getSystemAvailableFeaturesSync };\n\nvar _getSupportedPlatform95 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: function getter() {\n    return RNDeviceInfo.isLocationEnabled();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isLocationEnabledSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform96 = _slicedToArray(_getSupportedPlatform95, 2),\n    isLocationEnabled = _getSupportedPlatform96[0],\n    isLocationEnabledSync = _getSupportedPlatform96[1];\n\nexport { isLocationEnabled, isLocationEnabledSync };\n\nvar _getSupportedPlatform97 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return RNDeviceInfo.isHeadphonesConnected();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.isHeadphonesConnectedSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform98 = _slicedToArray(_getSupportedPlatform97, 2),\n    isHeadphonesConnected = _getSupportedPlatform98[0],\n    isHeadphonesConnectedSync = _getSupportedPlatform98[1];\n\nexport { isHeadphonesConnected, isHeadphonesConnectedSync };\n\nvar _getSupportedPlatform99 = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return RNDeviceInfo.getAvailableLocationProviders();\n  },\n  syncGetter: function syncGetter() {\n    return RNDeviceInfo.getAvailableLocationProvidersSync();\n  },\n  defaultValue: {}\n}),\n    _getSupportedPlatform100 = _slicedToArray(_getSupportedPlatform99, 2),\n    getAvailableLocationProviders = _getSupportedPlatform100[0],\n    getAvailableLocationProvidersSync = _getSupportedPlatform100[1];\n\nexport { getAvailableLocationProviders, getAvailableLocationProvidersSync };\nexport function getDeviceToken() {\n  return _regeneratorRuntime.async(function getDeviceToken$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!(Platform.OS === 'ios')) {\n            _context8.next = 2;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", RNDeviceInfo.getDeviceToken());\n\n        case 2:\n          return _context8.abrupt(\"return\", 'unknown');\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      batteryLevel = _useState2[0],\n      setBatteryLevel = _useState2[1];\n\n  useEffect(function () {\n    var setInitialValue = function setInitialValue() {\n      var initialValue;\n      return _regeneratorRuntime.async(function setInitialValue$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(getBatteryLevel());\n\n            case 2:\n              initialValue = _context9.sent;\n              setBatteryLevel(initialValue);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var onChange = function onChange(level) {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n    var subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelDidChange', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return batteryLevel;\n}\nexport function useBatteryLevelIsLow() {\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      batteryLevelIsLow = _useState4[0],\n      setBatteryLevelIsLow = _useState4[1];\n\n  useEffect(function () {\n    var setInitialValue = function setInitialValue() {\n      var initialValue;\n      return _regeneratorRuntime.async(function setInitialValue$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(getBatteryLevel());\n\n            case 2:\n              initialValue = _context10.sent;\n              setBatteryLevelIsLow(initialValue);\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var onChange = function onChange(level) {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n    var subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return batteryLevelIsLow;\n}\nexport function usePowerState() {\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      powerState = _useState6[0],\n      setPowerState = _useState6[1];\n\n  useEffect(function () {\n    var setInitialValue = function setInitialValue() {\n      var initialValue;\n      return _regeneratorRuntime.async(function setInitialValue$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(getPowerState());\n\n            case 2:\n              initialValue = _context11.sent;\n              setPowerState(initialValue);\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var onChange = function onChange(state) {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n    var subscription = deviceInfoEmitter.addListener('RNDeviceInfo_powerStateDidChange', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return powerState;\n}\nexport function useIsHeadphonesConnected() {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\nexport function useFirstInstallTime() {\n  return useOnMount(getFirstInstallTime, -1);\n}\nexport function useDeviceName() {\n  return useOnMount(getDeviceName, 'unknown');\n}\nexport function useHasSystemFeature(feature) {\n  var asyncGetter = useCallback(function () {\n    return hasSystemFeature(feature);\n  }, [feature]);\n  return useOnMount(asyncGetter, false);\n}\nexport function useIsEmulator() {\n  return useOnMount(isEmulator, false);\n}\nexport function useManufacturer() {\n  return useOnMount(getManufacturer, 'unknown');\n}\nexport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\nvar deviceInfoModule = {\n  getAndroidId: getAndroidId,\n  getAndroidIdSync: getAndroidIdSync,\n  getApiLevel: getApiLevel,\n  getApiLevelSync: getApiLevelSync,\n  getApplicationName: getApplicationName,\n  getAvailableLocationProviders: getAvailableLocationProviders,\n  getAvailableLocationProvidersSync: getAvailableLocationProvidersSync,\n  getBaseOs: getBaseOs,\n  getBaseOsSync: getBaseOsSync,\n  getBatteryLevel: getBatteryLevel,\n  getBatteryLevelSync: getBatteryLevelSync,\n  getBootloader: getBootloader,\n  getBootloaderSync: getBootloaderSync,\n  getBrand: getBrand,\n  getBuildId: getBuildId,\n  getBuildIdSync: getBuildIdSync,\n  getBuildNumber: getBuildNumber,\n  getBundleId: getBundleId,\n  getCarrier: getCarrier,\n  getCarrierSync: getCarrierSync,\n  getCodename: getCodename,\n  getCodenameSync: getCodenameSync,\n  getDevice: getDevice,\n  getDeviceId: getDeviceId,\n  getDeviceName: getDeviceName,\n  getDeviceNameSync: getDeviceNameSync,\n  getDeviceSync: getDeviceSync,\n  getDeviceToken: getDeviceToken,\n  getDeviceType: getDeviceType,\n  getDisplay: getDisplay,\n  getDisplaySync: getDisplaySync,\n  getFingerprint: getFingerprint,\n  getFingerprintSync: getFingerprintSync,\n  getFirstInstallTime: getFirstInstallTime,\n  getFirstInstallTimeSync: getFirstInstallTimeSync,\n  getFontScale: getFontScale,\n  getFontScaleSync: getFontScaleSync,\n  getFreeDiskStorage: getFreeDiskStorage,\n  getFreeDiskStorageOld: getFreeDiskStorageOld,\n  getFreeDiskStorageSync: getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync: getFreeDiskStorageOldSync,\n  getHardware: getHardware,\n  getHardwareSync: getHardwareSync,\n  getHost: getHost,\n  getHostSync: getHostSync,\n  getIncremental: getIncremental,\n  getIncrementalSync: getIncrementalSync,\n  getInstallerPackageName: getInstallerPackageName,\n  getInstallerPackageNameSync: getInstallerPackageNameSync,\n  getInstallReferrer: getInstallReferrer,\n  getInstallReferrerSync: getInstallReferrerSync,\n  getInstanceId: getInstanceId,\n  getInstanceIdSync: getInstanceIdSync,\n  getIpAddress: getIpAddress,\n  getIpAddressSync: getIpAddressSync,\n  getLastUpdateTime: getLastUpdateTime,\n  getLastUpdateTimeSync: getLastUpdateTimeSync,\n  getMacAddress: getMacAddress,\n  getMacAddressSync: getMacAddressSync,\n  getManufacturer: getManufacturer,\n  getManufacturerSync: getManufacturerSync,\n  getMaxMemory: getMaxMemory,\n  getMaxMemorySync: getMaxMemorySync,\n  getModel: getModel,\n  getPhoneNumber: getPhoneNumber,\n  getPhoneNumberSync: getPhoneNumberSync,\n  getPowerState: getPowerState,\n  getPowerStateSync: getPowerStateSync,\n  getPreviewSdkInt: getPreviewSdkInt,\n  getPreviewSdkIntSync: getPreviewSdkIntSync,\n  getProduct: getProduct,\n  getProductSync: getProductSync,\n  getReadableVersion: getReadableVersion,\n  getSecurityPatch: getSecurityPatch,\n  getSecurityPatchSync: getSecurityPatchSync,\n  getSerialNumber: getSerialNumber,\n  getSerialNumberSync: getSerialNumberSync,\n  getSystemAvailableFeatures: getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync: getSystemAvailableFeaturesSync,\n  getSystemName: getSystemName,\n  getSystemVersion: getSystemVersion,\n  getTags: getTags,\n  getTagsSync: getTagsSync,\n  getTotalDiskCapacity: getTotalDiskCapacity,\n  getTotalDiskCapacityOld: getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync: getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync: getTotalDiskCapacityOldSync,\n  getTotalMemory: getTotalMemory,\n  getTotalMemorySync: getTotalMemorySync,\n  getType: getType,\n  getTypeSync: getTypeSync,\n  getUniqueId: getUniqueId,\n  getUsedMemory: getUsedMemory,\n  getUsedMemorySync: getUsedMemorySync,\n  getUserAgent: getUserAgent,\n  getUserAgentSync: getUserAgentSync,\n  getVersion: getVersion,\n  hasGms: hasGms,\n  hasGmsSync: hasGmsSync,\n  hasHms: hasHms,\n  hasHmsSync: hasHmsSync,\n  hasNotch: hasNotch,\n  hasSystemFeature: hasSystemFeature,\n  hasSystemFeatureSync: hasSystemFeatureSync,\n  isAirplaneMode: isAirplaneMode,\n  isAirplaneModeSync: isAirplaneModeSync,\n  isBatteryCharging: isBatteryCharging,\n  isBatteryChargingSync: isBatteryChargingSync,\n  isCameraPresent: isCameraPresent,\n  isCameraPresentSync: isCameraPresentSync,\n  isEmulator: isEmulator,\n  isEmulatorSync: isEmulatorSync,\n  isHeadphonesConnected: isHeadphonesConnected,\n  isHeadphonesConnectedSync: isHeadphonesConnectedSync,\n  isLandscape: isLandscape,\n  isLandscapeSync: isLandscapeSync,\n  isLocationEnabled: isLocationEnabled,\n  isLocationEnabledSync: isLocationEnabledSync,\n  isPinOrFingerprintSet: isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync: isPinOrFingerprintSetSync,\n  isTablet: isTablet,\n  supported32BitAbis: supported32BitAbis,\n  supported32BitAbisSync: supported32BitAbisSync,\n  supported64BitAbis: supported64BitAbis,\n  supported64BitAbisSync: supported64BitAbisSync,\n  supportedAbis: supportedAbis,\n  supportedAbisSync: supportedAbisSync,\n  syncUniqueId: syncUniqueId,\n  useBatteryLevel: useBatteryLevel,\n  useBatteryLevelIsLow: useBatteryLevelIsLow,\n  useDeviceName: useDeviceName,\n  useFirstInstallTime: useFirstInstallTime,\n  useHasSystemFeature: useHasSystemFeature,\n  useIsEmulator: useIsEmulator,\n  usePowerState: usePowerState,\n  useManufacturer: useManufacturer,\n  useIsHeadphonesConnected: useIsHeadphonesConnected\n};\nexport default deviceInfoModule;","map":{"version":3,"sources":["index.ts"],"names":["getUniqueId","getSupportedPlatformInfoSync","defaultValue","memoKey","supportedPlatforms","getter","RNDeviceInfo","uniqueId","Platform","getSupportedPlatformInfoFunctions","syncGetter","getDeviceId","Promise","getModel","model","getBrand","brand","systemName","getSystemVersion","getBundleId","bundleId","getApplicationName","getBuildNumber","getVersion","appVersion","userAgent","isTablet","notch","_brand","_model","devicesWithNotch","item","getTotalDiskCapacity","getTotalDiskCapacitySync","getFreeDiskStorage","getFreeDiskStorageSync","isLandscapeSync","width","Dimensions","getDeviceType","deviceType","getDeviceTypeSync","deviceInfoEmitter","NativeModules","useState","useEffect","setInitialValue","initialValue","getBatteryLevel","setBatteryLevel","onChange","level","subscription","setBatteryLevelIsLow","getPowerState","setPowerState","state","useOnEvent","useOnMount","asyncGetter","useCallback","hasSystemFeature","deviceInfoModule","getAndroidId","getAndroidIdSync","getApiLevel","getApiLevelSync","getAvailableLocationProviders","getAvailableLocationProvidersSync","getBaseOs","getBaseOsSync","getBatteryLevelSync","getBootloader","getBootloaderSync","getBuildId","getBuildIdSync","getCarrier","getCarrierSync","getCodename","getCodenameSync","getDevice","getDeviceName","getDeviceNameSync","getDeviceSync","getDeviceToken","getDisplay","getDisplaySync","getFingerprint","getFingerprintSync","getFirstInstallTime","getFirstInstallTimeSync","getFontScale","getFontScaleSync","getFreeDiskStorageOld","getFreeDiskStorageOldSync","getHardware","getHardwareSync","getHost","getHostSync","getIncremental","getIncrementalSync","getInstallerPackageName","getInstallerPackageNameSync","getInstallReferrer","getInstallReferrerSync","getInstanceId","getInstanceIdSync","getIpAddress","getIpAddressSync","getLastUpdateTime","getLastUpdateTimeSync","getMacAddress","getMacAddressSync","getManufacturer","getManufacturerSync","getMaxMemory","getMaxMemorySync","getPhoneNumber","getPhoneNumberSync","getPowerStateSync","getPreviewSdkInt","getPreviewSdkIntSync","getProduct","getProductSync","getReadableVersion","getSecurityPatch","getSecurityPatchSync","getSerialNumber","getSerialNumberSync","getSystemAvailableFeatures","getSystemAvailableFeaturesSync","getSystemName","getTags","getTagsSync","getTotalDiskCapacityOld","getTotalDiskCapacityOldSync","getTotalMemory","getTotalMemorySync","getType","getTypeSync","getUsedMemory","getUsedMemorySync","getUserAgent","getUserAgentSync","hasGms","hasGmsSync","hasHms","hasHmsSync","hasNotch","hasSystemFeatureSync","isAirplaneMode","isAirplaneModeSync","isBatteryCharging","isBatteryChargingSync","isCameraPresent","isCameraPresentSync","isEmulator","isEmulatorSync","isHeadphonesConnected","isHeadphonesConnectedSync","isLandscape","isLocationEnabled","isLocationEnabledSync","isPinOrFingerprintSet","isPinOrFingerprintSetSync","supported32BitAbis","supported32BitAbisSync","supported64BitAbis","supported64BitAbisSync","supportedAbis","supportedAbisSync","syncUniqueId","useBatteryLevel","useBatteryLevelIsLow","useDeviceName","useFirstInstallTime","useHasSystemFeature","useIsEmulator","usePowerState","useManufacturer","useIsHeadphonesConnected"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnEvent, useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport {\n  getSupportedPlatformInfoFunctions,\n  getSupportedPlatformInfoSync,\n  getSupportedPlatformInfoAsync,\n} from './internal/supported-platform-info';\nimport { DeviceInfoModule } from './internal/privateTypes';\nimport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState } from './internal/types';\n\nexport const getUniqueId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'uniqueId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.uniqueId,\n  });\n\nlet uniqueId: string;\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n  return uniqueId;\n}\n\nexport const [getInstanceId, getInstanceIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getInstanceId(),\n  syncGetter: () => RNDeviceInfo.getInstanceIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getSerialNumber, getSerialNumberSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSerialNumber(),\n  syncGetter: () => RNDeviceInfo.getSerialNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getAndroidId, getAndroidIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getAndroidId(),\n  syncGetter: () => RNDeviceInfo.getAndroidIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIpAddress, getIpAddressSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getIpAddress(),\n  syncGetter: () => RNDeviceInfo.getIpAddressSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isCameraPresent, isCameraPresentSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isCameraPresent(),\n  syncGetter: () => RNDeviceInfo.isCameraPresentSync(),\n  defaultValue: false,\n});\n\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport const getDeviceId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'deviceId',\n    getter: () => RNDeviceInfo.deviceId,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const [getManufacturer, getManufacturerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () =>\n    Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer(),\n  syncGetter: () => (Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync()),\n  defaultValue: 'unknown',\n});\n\nexport const getModel = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'model',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    getter: () => RNDeviceInfo.model,\n  });\n\nexport const getBrand = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'brand',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.brand,\n  });\n\nlet systemName: string;\nexport function getSystemName() {\n  if (!systemName) {\n    if (Platform.OS === 'ios') {\n      systemName = RNDeviceInfo.systemName;\n    } else if (Platform.OS === 'android') {\n      systemName = 'Android';\n    } else if (Platform.OS === 'windows') {\n      systemName = 'Windows';\n    } else {\n      systemName = 'unknown';\n    }\n  }\n  return systemName;\n}\n\nexport const getSystemVersion = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.systemVersion,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'systemVersion',\n  });\n\nexport const [getBuildId, getBuildIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getBuildId(),\n  syncGetter: () => RNDeviceInfo.getBuildIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getApiLevel, getApiLevelSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getApiLevel(),\n  syncGetter: () => RNDeviceInfo.getApiLevelSync(),\n  defaultValue: -1,\n});\n\nexport const getBundleId = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'bundleId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.bundleId,\n  });\n\nexport const [\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getInstallerPackageName(),\n  syncGetter: () => RNDeviceInfo.getInstallerPackageNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const getApplicationName = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'appName',\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.appName,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const getBuildNumber = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'buildNumber',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.buildNumber,\n    defaultValue: 'unknown',\n  });\n\nexport const getVersion = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'version',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.appVersion,\n  });\n\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nexport const [getDeviceName, getDeviceNameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'deviceName',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getDeviceName(),\n  syncGetter: () => RNDeviceInfo.getDeviceNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getUsedMemory, getUsedMemorySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getUsedMemory(),\n  syncGetter: () => RNDeviceInfo.getUsedMemorySync(),\n  defaultValue: -1,\n});\n\nlet userAgent: string;\nexport async function getUserAgent() {\n  if (!userAgent) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n      userAgent = await RNDeviceInfo.getUserAgent();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n  return userAgent;\n}\n\nexport function getUserAgentSync() {\n  if (!userAgent) {\n    // getUserAgentSync is not available on iOS since it rely on an completion operation\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      userAgent = RNDeviceInfo.getUserAgentSync();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n  return userAgent;\n}\n\nexport const [getFontScale, getFontScaleSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFontScale(),\n  syncGetter: () => RNDeviceInfo.getFontScaleSync(),\n  defaultValue: -1,\n});\n\nexport const [getBootloader, getBootloaderSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getBootloader(),\n  syncGetter: () => RNDeviceInfo.getBootloaderSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getDevice, getDeviceSync] = getSupportedPlatformInfoFunctions({\n  getter: () => RNDeviceInfo.getDevice(),\n  syncGetter: () => RNDeviceInfo.getDeviceSync(),\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android'],\n});\n\nexport const [getDisplay, getDisplaySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getDisplay(),\n  syncGetter: () => RNDeviceInfo.getDisplaySync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getFingerprint, getFingerprintSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getFingerprint(),\n  syncGetter: () => RNDeviceInfo.getFingerprintSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHardware, getHardwareSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHardware(),\n  syncGetter: () => RNDeviceInfo.getHardwareSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHost, getHostSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHost(),\n  syncGetter: () => RNDeviceInfo.getHostSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getProduct, getProductSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getProduct(),\n  syncGetter: () => RNDeviceInfo.getProductSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTags, getTagsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getTags(),\n  syncGetter: () => RNDeviceInfo.getTagsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getType, getTypeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getType(),\n  syncGetter: () => RNDeviceInfo.getTypeSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getBaseOs, getBaseOsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: () => RNDeviceInfo.getBaseOs(),\n  syncGetter: () => RNDeviceInfo.getBaseOsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getPreviewSdkInt, getPreviewSdkIntSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPreviewSdkInt(),\n  syncGetter: () => RNDeviceInfo.getPreviewSdkIntSync(),\n  defaultValue: -1,\n});\n\nexport const [getSecurityPatch, getSecurityPatchSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSecurityPatch(),\n  syncGetter: () => RNDeviceInfo.getSecurityPatchSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCodename, getCodenameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getCodename(),\n  syncGetter: () => RNDeviceInfo.getCodenameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIncremental, getIncrementalSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getIncremental(),\n  syncGetter: () => RNDeviceInfo.getIncrementalSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isEmulator, isEmulatorSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isEmulator(),\n  syncGetter: () => RNDeviceInfo.isEmulatorSync(),\n  defaultValue: false,\n});\n\nexport const isTablet = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: false,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'tablet',\n    getter: () => RNDeviceInfo.isTablet,\n  });\n\nexport const [isPinOrFingerprintSet, isPinOrFingerprintSetSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.isPinOrFingerprintSet(),\n    syncGetter: () => RNDeviceInfo.isPinOrFingerprintSetSync(),\n    defaultValue: false,\n  }\n);\n\nlet notch: boolean;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n    let _model = getModel();\n    notch =\n      devicesWithNotch.findIndex(\n        (item) =>\n          item.brand.toLowerCase() === _brand.toLowerCase() &&\n          item.model.toLowerCase() === _model.toLowerCase()\n      ) !== -1;\n  }\n  return notch;\n}\n\nexport const [hasGms, hasGmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasGms(),\n  syncGetter: () => RNDeviceInfo.hasGmsSync(),\n  defaultValue: false,\n});\n\nexport const [hasHms, hasHmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasHms(),\n  syncGetter: () => RNDeviceInfo.hasHmsSync(),\n  defaultValue: false,\n});\n\nexport const [getFirstInstallTime, getFirstInstallTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getFirstInstallTime(),\n  syncGetter: () => RNDeviceInfo.getFirstInstallTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getInstallReferrer, getInstallReferrerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getInstallReferrer(),\n  syncGetter: () => RNDeviceInfo.getInstallReferrerSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getLastUpdateTime, getLastUpdateTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getLastUpdateTime(),\n  syncGetter: () => RNDeviceInfo.getLastUpdateTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getPhoneNumber, getPhoneNumberSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPhoneNumber(),\n  syncGetter: () => RNDeviceInfo.getPhoneNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCarrier, getCarrierSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getCarrier(),\n  syncGetter: () => RNDeviceInfo.getCarrierSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTotalMemory, getTotalMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalMemory(),\n  syncGetter: () => RNDeviceInfo.getTotalMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getMaxMemory, getMaxMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getMaxMemory(),\n  syncGetter: () => RNDeviceInfo.getMaxMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getTotalDiskCapacity, getTotalDiskCapacitySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalDiskCapacity(),\n  syncGetter: () => RNDeviceInfo.getTotalDiskCapacitySync(),\n  defaultValue: -1,\n});\n\nexport async function getTotalDiskCapacityOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacity();\n  }\n\n  return -1;\n}\n\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\n\nexport const [getFreeDiskStorage, getFreeDiskStorageSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getFreeDiskStorage(),\n  syncGetter: () => RNDeviceInfo.getFreeDiskStorageSync(),\n  defaultValue: -1,\n});\n\nexport async function getFreeDiskStorageOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorage();\n  }\n\n  return -1;\n}\n\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\n\nexport const [getBatteryLevel, getBatteryLevelSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getBatteryLevel(),\n  syncGetter: () => RNDeviceInfo.getBatteryLevelSync(),\n  defaultValue: -1,\n});\n\nexport const [getPowerState, getPowerStateSync] = getSupportedPlatformInfoFunctions<\n  PowerState | {}\n>({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getPowerState(),\n  syncGetter: () => RNDeviceInfo.getPowerStateSync(),\n  defaultValue: {},\n});\n\nexport const [isBatteryCharging, isBatteryChargingSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isBatteryCharging(),\n  syncGetter: () => RNDeviceInfo.isBatteryChargingSync(),\n  defaultValue: false,\n});\n\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\n\nexport function isLandscapeSync() {\n  const { height, width } = Dimensions.get('window');\n  return width >= height;\n}\n\nexport const [isAirplaneMode, isAirplaneModeSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.isAirplaneMode(),\n  syncGetter: () => RNDeviceInfo.isAirplaneModeSync(),\n  defaultValue: false,\n});\n\nexport const getDeviceType = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n\nexport const getDeviceTypeSync = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n\nexport const [supportedAbis, supportedAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getSupportedAbis(),\n  syncGetter: () => RNDeviceInfo.getSupportedAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported32BitAbis, supported32BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported32BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported32BitAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported64BitAbis, supported64BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported64BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported64BitAbisSync(),\n  defaultValue: [],\n});\n\nexport async function hasSystemFeature(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n  return false;\n}\n\nexport function hasSystemFeatureSync(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n  return false;\n}\n\nexport const [\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSystemAvailableFeatures(),\n  syncGetter: () => RNDeviceInfo.getSystemAvailableFeaturesSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [isLocationEnabled, isLocationEnabledSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.isLocationEnabled(),\n  syncGetter: () => RNDeviceInfo.isLocationEnabledSync(),\n  defaultValue: false,\n});\n\nexport const [isHeadphonesConnected, isHeadphonesConnectedSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios'],\n    getter: () => RNDeviceInfo.isHeadphonesConnected(),\n    syncGetter: () => RNDeviceInfo.isHeadphonesConnectedSync(),\n    defaultValue: false,\n  }\n);\n\nexport const [\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getAvailableLocationProviders(),\n  syncGetter: () => RNDeviceInfo.getAvailableLocationProvidersSync(),\n  defaultValue: {},\n});\n\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n  return 'unknown';\n}\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel(): number | null {\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_batteryLevelDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevel;\n}\n\nexport function useBatteryLevelIsLow(): number | null {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevelIsLow(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevelIsLow;\n}\n\nexport function usePowerState(): PowerState | {} {\n  const [powerState, setPowerState] = useState<PowerState | {}>({});\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: PowerState | {} = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = (state: PowerState) => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_powerStateDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return powerState;\n}\n\nexport function useIsHeadphonesConnected(): AsyncHookResult<boolean> {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\n\nexport function useFirstInstallTime(): AsyncHookResult<number> {\n  return useOnMount(getFirstInstallTime, -1);\n}\n\nexport function useDeviceName(): AsyncHookResult<string> {\n  return useOnMount(getDeviceName, 'unknown');\n}\n\nexport function useHasSystemFeature(feature: string): AsyncHookResult<boolean> {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\n\nexport function useIsEmulator(): AsyncHookResult<boolean> {\n  return useOnMount(isEmulator, false);\n}\n\nexport function useManufacturer(): AsyncHookResult<string> {\n  return useOnMount(getManufacturer, 'unknown');\n}\n\nexport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\n\nconst deviceInfoModule: DeviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageOld,\n  getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  hasGms,\n  hasGmsSync,\n  hasHms,\n  hasHmsSync,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n  useManufacturer,\n  useIsHeadphonesConnected,\n};\n\nexport default deviceInfoModule;\n"]},"metadata":{},"sourceType":"module"}