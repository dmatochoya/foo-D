{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar memo = {};\nexport function clearMemo() {\n  memo = {};\n}\n\nfunction getSupportedFunction(supportedPlatforms, getter, defaultGetter) {\n  var supportedMap = {};\n  supportedPlatforms.filter(function (key) {\n    return Platform.OS == key;\n  }).forEach(function (key) {\n    return supportedMap[key] = getter;\n  });\n  return Platform.select(_objectSpread(_objectSpread({}, supportedMap), {}, {\n    default: defaultGetter\n  }));\n}\n\nexport function getSupportedPlatformInfoSync(_ref) {\n  var getter = _ref.getter,\n      supportedPlatforms = _ref.supportedPlatforms,\n      defaultValue = _ref.defaultValue,\n      memoKey = _ref.memoKey;\n\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    var output = getSupportedFunction(supportedPlatforms, getter, function () {\n      return defaultValue;\n    })();\n\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\nexport function getSupportedPlatformInfoAsync(_ref2) {\n  var getter, supportedPlatforms, defaultValue, memoKey, output;\n  return _regeneratorRuntime.async(function getSupportedPlatformInfoAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          getter = _ref2.getter, supportedPlatforms = _ref2.supportedPlatforms, defaultValue = _ref2.defaultValue, memoKey = _ref2.memoKey;\n\n          if (!(memoKey && memo[memoKey] != undefined)) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", memo[memoKey]);\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getSupportedFunction(supportedPlatforms, getter, function () {\n            return Promise.resolve(defaultValue);\n          })());\n\n        case 7:\n          output = _context.sent;\n\n          if (memoKey) {\n            memo[memoKey] = output;\n          }\n\n          return _context.abrupt(\"return\", output);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSupportedPlatformInfoFunctions(_ref3) {\n  var syncGetter = _ref3.syncGetter,\n      asyncParams = _objectWithoutProperties(_ref3, [\"syncGetter\"]);\n\n  return [function () {\n    return getSupportedPlatformInfoAsync(asyncParams);\n  }, function () {\n    return getSupportedPlatformInfoSync(_objectSpread(_objectSpread({}, asyncParams), {}, {\n      getter: syncGetter\n    }));\n  }];\n}","map":{"version":3,"sources":["supported-platform-info.ts"],"names":["memo","supportedMap","supportedPlatforms","key","Platform","default","defaultGetter","memoKey","output","getSupportedFunction","Promise","asyncParams","getSupportedPlatformInfoAsync","getSupportedPlatformInfoSync","getter","syncGetter"],"mappings":";;;;;;;;;AAYA,IAAIA,IAAc,GAAlB,EAAA;AAEA,OAAO,SAAA,SAAA,GAAqB;AAC1BA,EAAAA,IAAI,GAAJA,EAAAA;AACD;;AAQD,SAAA,oBAAA,CAAA,kBAAA,EAAA,MAAA,EAAA,aAAA,EAIa;AACX,MAAIC,YAAkB,GAAtB,EAAA;AACAC,EAAAA,kBAAkB,CAAlBA,MAAAA,CACWC,UAAAA,GAAD;AAAA,WAASC,QAAQ,CAARA,EAAAA,IADnBF,GACU;AAAA,GADVA,EAAAA,OAAAA,CAEYC,UAAAA,GAAD;AAAA,WAASF,YAAY,CAAZA,GAAY,CAAZA,GAFpBC,MAEW;AAAA,GAFXA;AAGA,SAAO,QAAQ,CAAR,MAAA,iCAAgB,YAAhB;AAELG,IAAAA,OAAO,EAAEC;AAFJ,KAAP;AAID;;AAMD,OAAO,SAAA,4BAAA,OAKsC;AAAA,MALG,MAKH,QALG,MAKH;AAAA,MALG,kBAKH,QALG,kBAKH;AAAA,MALG,YAKH,QALG,YAKH;AAAA,MAD3CC,OAC2C,QAD3CA,OAC2C;;AAC3C,MAAIA,OAAO,IAAIP,IAAI,CAAJA,OAAI,CAAJA,IAAf,SAAA,EAA2C;AACzC,WAAOA,IAAI,CAAX,OAAW,CAAX;AADF,GAAA,MAEO;AACL,QAAMQ,MAAM,GAAGC,oBAAoB,CAAA,kBAAA,EAAA,MAAA,EAA6B;AAAA,aAAhE,YAAgE;AAAA,KAA7B,CAApBA,EAAf;;AACA,QAAA,OAAA,EAAa;AACXT,MAAAA,IAAI,CAAJA,OAAI,CAAJA,GAAAA,MAAAA;AACD;;AACD,WAAA,MAAA;AACD;AACF;AAMD,OAAO,SAAA,6BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD,UAAA,MAAhD,SAAgD,MAAhD,EAAgD,kBAAhD,SAAgD,kBAAhD,EAAgD,YAAhD,SAAgD,YAAhD,EAILO,OAJK,SAILA,OAJK;;AAAA,gBAMDA,OAAO,IAAIP,IAAI,CAAJA,OAAI,CAAJA,IAAf,SANK;AAAA;AAAA;AAAA;;AAAA,2CAOIA,IAAI,CAAX,OAAW,CAPR;;AAAA;AAAA;AAAA,2CASkBS,oBAAoB,CAAA,kBAAA,EAAA,MAAA,EAA6B;AAAA,mBACpEC,OAAO,CAAPA,OAAAA,CADF,YACEA,CADoE;AAAA,WAA7B,CAApBD,EATlB;;AAAA;AASGD,UAAAA,MATH;;AAYH,cAAA,OAAA,EAAa;AACXR,YAAAA,IAAI,CAAJA,OAAI,CAAJA,GAAAA,MAAAA;AACD;;AAdE,2CAgBH,MAhBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBP,OAAO,SAAA,iCAAA,QAGyE;AAAA,MAH3B,UAG2B,SAH3B,UAG2B;AAAA,MAD3EW,WAC2E;;AAC9E,SAAO,CACL;AAAA,WAAMC,6BAA6B,CAD9B,WAC8B,CAAnC;AAAA,GADK,EAEL;AAAA,WAAMC,4BAA4B,iCAAC,WAAD;AAAmBC,MAAAA,MAAM,EAAEC;AAA3B,OAAlC;AAAA,GAFK,CAAP;AAID","sourcesContent":["import { Platform } from 'react-native';\n\nimport {\n  PlatformArray,\n  Getter,\n  GetSupportedPlatformInfoAsyncParams,\n  GetSupportedPlatformInfoSyncParams,\n  GetSupportedPlatformInfoFunctionsParams,\n} from './privateTypes';\n\ntype MemoType = { [key: string]: any };\n// centralized memo object\nlet memo: MemoType = {};\n\nexport function clearMemo() {\n  memo = {};\n}\n\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\nfunction getSupportedFunction<T>(\n  supportedPlatforms: PlatformArray,\n  getter: Getter<T>,\n  defaultGetter: Getter<T>\n): Getter<T> {\n  let supportedMap : any = {};\n  supportedPlatforms\n    .filter((key) => Platform.OS == key)\n    .forEach((key) => supportedMap[key] = getter);\n  return Platform.select({\n    ...supportedMap,\n    default: defaultGetter,\n  });\n}\n\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\nexport function getSupportedPlatformInfoSync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoSyncParams<T>): T {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\n\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\nexport async function getSupportedPlatformInfoAsync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoAsyncParams<T>): Promise<T> {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () =>\n      Promise.resolve(defaultValue)\n    )();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\nexport function getSupportedPlatformInfoFunctions<T>({\n  syncGetter,\n  ...asyncParams\n}: GetSupportedPlatformInfoFunctionsParams<T>): [Getter<Promise<T>>, Getter<T>] {\n  return [\n    () => getSupportedPlatformInfoAsync(asyncParams),\n    () => getSupportedPlatformInfoSync({ ...asyncParams, getter: syncGetter }),\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}