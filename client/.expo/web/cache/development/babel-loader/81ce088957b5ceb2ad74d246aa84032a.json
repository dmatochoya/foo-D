{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/davidmatochoya/Desktop/david-final-project/client/components/Search/TextInput.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { getRecipeByNameFromAPI, restoreSearchReducer } from \"../../redux/actions/recipesActions\";\n\nfunction SearchBoxInput(_ref) {\n  var searchBoxRef = _ref.searchBoxRef,\n      actions = _ref.actions,\n      navigation = _ref.navigation,\n      recipe = _ref.recipe;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      submitted = _useState4[0],\n      setSubmitted = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      recipeFound = _useState6[0],\n      setRecipeFound = _useState6[1];\n\n  var _useState7 = useState('Type a recipe name here!'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      placeHolderText = _useState8[0],\n      setPlaceHolderText = _useState8[1];\n\n  var _useState9 = useState('rgb(158, 158, 158)'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      placeHolderColor = _useState10[0],\n      setPlaceHolderColor = _useState10[1];\n\n  useEffect(function () {\n    if (Object.keys(recipe).length) {\n      setRecipeFound(true);\n      navigation.navigate('detail', {\n        recipe: recipe\n      });\n      actions.restoreSearchReducer();\n    }\n  }, [Object.keys(recipe).length]);\n  useEffect(function () {\n    console.log(recipeFound, submitted);\n    console.log(!recipeFound && submitted);\n\n    if (!recipeFound && submitted) {\n      setPlaceHolderText('No results');\n      setPlaceHolderColor('red');\n    } else {\n      setPlaceHolderText('Type a recipe name here!');\n      setPlaceHolderColor('rgb(158, 158, 158)');\n    }\n  }, [submitted]);\n  return React.createElement(TextInput, {\n    style: {\n      height: 40,\n      fontSize: 17,\n      marginLeft: 10,\n      width: '100%'\n    },\n    placeholder: placeHolderText,\n    placeholderTextColor: placeHolderColor,\n    onChangeText: function onChangeText(textChange) {\n      return setText(textChange);\n    },\n    defaultValue: text,\n    ref: searchBoxRef,\n    onSubmitEditing: function onSubmitEditing() {\n      if (text) {\n        actions.getRecipeByNameFromAPI(text, false);\n        setSubmitted(true);\n        setTimeout(function () {\n          setText('');\n        }, 1500);\n      }\n    },\n    onFocus: function onFocus() {\n      return setSubmitted(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction mapStateToProps(_ref2) {\n  var searchReducer = _ref2.searchReducer;\n  return {\n    recipe: searchReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      getRecipeByNameFromAPI: getRecipeByNameFromAPI,\n      restoreSearchReducer: restoreSearchReducer\n    }, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBoxInput);","map":{"version":3,"sources":["/Users/davidmatochoya/Desktop/david-final-project/client/components/Search/TextInput.tsx"],"names":["React","useState","useEffect","connect","bindActionCreators","getRecipeByNameFromAPI","restoreSearchReducer","SearchBoxInput","searchBoxRef","actions","navigation","recipe","text","setText","submitted","setSubmitted","recipeFound","setRecipeFound","placeHolderText","setPlaceHolderText","placeHolderColor","setPlaceHolderColor","Object","keys","length","navigate","console","log","height","fontSize","marginLeft","width","textChange","setTimeout","mapStateToProps","searchReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TextInput } from 'react-native';\nimport { connect } from 'react-redux';\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\nimport { getRecipeByNameFromAPI, restoreSearchReducer } from '../../redux/actions/recipesActions';\n\ninterface Actions {\n    getRecipeByNameFromAPI(text : string, boolean: boolean) : void\n    restoreSearchReducer() : void\n}\n\ninterface Navigation {\n    navigate(route: string, data: object): void\n  }\n\ninterface Props {\n    searchBoxRef(): void\n    actions: Actions\n    navigation: Navigation\n    recipe: object\n}\n\nfunction SearchBoxInput({\n  searchBoxRef, actions, navigation, recipe,\n} : Props) {\n  const [text, setText] = useState<string>('');\n  const [submitted, setSubmitted] = useState<boolean>(false);\n  const [recipeFound, setRecipeFound] = useState<boolean>(false);\n  const [placeHolderText, setPlaceHolderText] = useState<string>('Type a recipe name here!');\n  const [placeHolderColor, setPlaceHolderColor] = useState<string>('rgb(158, 158, 158)');\n\n  useEffect(() => {\n    if (Object.keys(recipe).length) {\n      setRecipeFound(true);\n      navigation.navigate('detail', {\n        recipe,\n      });\n      actions.restoreSearchReducer();\n    }\n  }, [Object.keys(recipe).length]);\n\n  useEffect(() => {\n    console.log(recipeFound, submitted);\n    console.log(!recipeFound && submitted);\n    if (!recipeFound && submitted) {\n      setPlaceHolderText('No results');\n      setPlaceHolderColor('red');\n    } else {\n      setPlaceHolderText('Type a recipe name here!');\n      setPlaceHolderColor('rgb(158, 158, 158)');\n    }\n  }, [submitted]);\n\n  return (\n    <TextInput\n      style={{\n        height: 40, fontSize: 17, marginLeft: 10, width: '100%',\n      }}\n      placeholder={placeHolderText}\n      placeholderTextColor={placeHolderColor}\n      onChangeText={(textChange) => setText(textChange)}\n      defaultValue={text}\n      ref={searchBoxRef}\n      onSubmitEditing={() => {\n        if (text) {\n          actions.getRecipeByNameFromAPI(text, false);\n          setSubmitted(true);\n          setTimeout(() => {\n            setText('');\n          }, 1500);\n        }\n      }}\n      onFocus={() => setSubmitted(false)}\n    />\n  );\n}\n\nfunction mapStateToProps({ searchReducer }\n    : { searchReducer: object}) {\n  return {\n    recipe: searchReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n  return {\n    actions: bindActionCreators({ getRecipeByNameFromAPI, restoreSearchReducer }, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBoxInput);\n"]},"metadata":{},"sourceType":"module"}