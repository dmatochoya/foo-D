{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/davidmatochoya/Desktop/david-final-project/client/src/components/Login/LoginScreen.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default function LoginScreen() {\n  function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n\n      for (var i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function onSignIn(googleUser) {\n    console.log('Google Auth Response', googleUser);\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n      unsubscribe();\n\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n        firebase.auth().signInWithCredential(credential).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n\n  var signInWithGoogleAsync = function signInWithGoogleAsync() {\n    var result;\n    return _regeneratorRuntime.async(function signInWithGoogleAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Google.logInAsync({\n              androidClientId: '489999849555-5do62o44r40gggb0opk8gb2ltrtmtbm9.apps.googleusercontent.com',\n              scopes: ['profile', 'email']\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (!(result.type === 'success')) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", result.accessToken);\n\n          case 6:\n            return _context.abrupt(\"return\", {\n              cancelled: true\n            });\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            console.log('entro2');\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Sign in with Google\",\n    onPress: function onPress() {\n      return signInWithGoogleAsync();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/davidmatochoya/Desktop/david-final-project/client/src/components/Login/LoginScreen.tsx"],"names":["React","Google","firebase","styles","StyleSheet","create","container","flex","alignItems","justifyContent","LoginScreen","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","catch","error","errorCode","code","errorMessage","message","email","signInWithGoogleAsync","logInAsync","androidClientId","scopes","result","type","cancelled"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, Button } from 'react-native';\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default function LoginScreen(): JSX.Element {\n  function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      const { providerData } = firebaseUser;\n      for (let i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID\n                && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function onSignIn(googleUser) {\n    console.log('Google Auth Response', googleUser);\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    const unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\n      unsubscribe();\n      // Check if we are already signed-in Firebase with the correct user.\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        // Build Firebase credential with the Google ID token.\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          googleUser.idToken,\n          googleUser.accessToken,\n        );\n\n        // Sign in with credential from the Google user.\n        firebase.auth().signInWithCredential(credential).catch((error) => {\n          // Handle Errors here.\n          const errorCode = error.code;\n          const errorMessage = error.message;\n          // The email of the user's account used.\n          const { email } = error;\n          // The firebase.auth.AuthCredential type that was used.\n          const { credential } = error;\n          // ...\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n  const signInWithGoogleAsync = async () => {\n    try {\n      const result = await Google.logInAsync({\n        androidClientId: '489999849555-5do62o44r40gggb0opk8gb2ltrtmtbm9.apps.googleusercontent.com',\n        scopes: ['profile', 'email'],\n      });\n\n      if (result.type === 'success') {\n        return result.accessToken;\n      }\n      return { cancelled: true };\n    } catch (e) {\n      console.log(e);\n      console.log('entro2');\n      return { error: true };\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <Button title=\"Sign in with Google\" onPress={() => signInWithGoogleAsync()} />\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}